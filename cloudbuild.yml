---
steps:
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    # Get list of directories to loop over
    array=(*/)

    # start worker queue
    bash pool.sh start

    # <= LOOP SUMMARY => 
    #   - Split directories specific tools
    #   - Enqueue toolname for a worker to build
    dir_count=1
    for dir in "${array[@]}"; do
        echo "Building $dir_count/${#array[@]}"
        # Trim the trailing / from the name
        toolname=${dir:0:(-1)}
        dockerfile_dir="$(echo $dir)Dockerfile"
        dockerfile_md5=$(md5sum ${dir}Dockerfile | cut -d ' ' -f1)

        echo "Checking for existing image for tool: $toolname with Dockerfile md5 hash of: $dockerfile_md5"
        existing_tags=$(gcloud container images list-tags --filter="tags:$dockerfile_md5" --format=json gcr.io/$PROJECT_ID/$toolname)
        
        # Only build if the tag does not equal the md5sum of the current Dockerfile
        if [ "$existing_tags" == "[]" ]; then
            # Enqueue this directory for a worker to build
            #echo $toolname >>myqueue <<EOF
            echo $toolname >>myqueue
        else
            echo "Skipping build of $toolname: Image from this Dockerfile already exists in repo. https://gcr.io/$PROJECT_ID/$toolname"
        fi

        echo "...COMPLETE!\n"
    done

    # stop the workers when they are completed
    while [ $(bash pool.sh status; echo $?) -gt 0 ]; do
        sleep(10)
    done
    bash pool.sh stop

